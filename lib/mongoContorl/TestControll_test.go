package mongoContorl

import (
	"encoding/json"
	"fmt"
	"gin/controller"
	"gin/lib"
	"log"
	"testing"
)

func TestGetSingleInstanceMongoDB(t *testing.T) {
	mongodb := GetSingleInstanceMongoDB("text")

	mongodb = GetSingleInstanceMongoDB("text")

	mongodb = GetSingleInstanceMongoDB("text")
	mongodb = GetSingleInstanceMongoDB("text")
	mongodb.Close()
	//mo
	//ngodb := GetInstance()
	fmt.Printf("%v", &mongodb)
	//t.Errorf("expected %s do not match actual %s", expectOutput, output)
}
func TestGetAppletsAddress(t *testing.T) {
	url := "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=wx8252e5fccc6c0fc4&secret=7995577300abcd9cdc5f15e4828b3e1e"
	appletsId := map[string]string{
		"grant_type": "client_credential",
		"appid":      "wx8252e5fccc6c0fc4",
		"secret":     "7995577300abcd9cdc5f15e4828b3e1e",
	}
	//appletsId := []byte{}}
	encode, err := json.Marshal(appletsId)
	if err != nil {

	}
	value, status := lib.Post(url, encode)
	uu := map[string]string{
		"access_token": "",
		"expires_in":   "",
	}
	err = json.Unmarshal(value, &uu)
	if err != nil {
		log.Println("Unmarshal", err)
	}
	fmt.Printf("%s \n", uu["access_token"]+"234")
	log.Println(status)
	if status != 200 {
		return
	}
	type JumpWxa struct {
		path  string `json:"path"`
		query string `json:"query"`
	}
	type AutoGenerated struct {
		JumpWxa JumpWxa `json:"jump_wxa"`
	}

	inner := JumpWxa{
		"pages/index/index",
		"test=123&wx=333333",
	}
	path := AutoGenerated{
		inner,
	}
	value, _ = json.Marshal(path)
	url = "https://api.weixin.qq.com/wxa/generatescheme?access_token=" + uu["access_token"]
	value, status = lib.Post(url, value)

	var result controller.appletsRespond
	json.Unmarshal(value, &result)
	log.Println(string(value))
}
func TestName(t *testing.T) {
	type JumpWxa struct {
		path  string `json:"path"`
		Query string `json:"query"`
	}
	type AutoGenerated struct {
		JumpWxa JumpWxa `json:"jump_wxa"`
	}

	inner := JumpWxa{
		"pages/index/index",
		"test=123&wx=333333",
	}
	path := AutoGenerated{
		inner,
	}
	value, _ := json.Marshal(path)
	//fmt.Printf("%#v", path)
	log.Println(string(value))
}
